{"name":"Vagrant","tagline":"","body":"# Using Vagrant\r\n### Choose a Box\r\nThe first thing you’ll need to do is pick a box that you want to build from. The `Vagrant Cloud` lets you easily find boxes that people have shared.\r\n\r\n### Initialize and Start the Vagrant Box\r\nAfter you’ve chosen a box, initialize the Vagrant box.\r\n```shell\r\nvagrant init hashicorp/precise64\r\n```\r\n\r\nCreate a new folder and cd into that. The following command will create a Vagrant file for you. \r\n```shell\r\nvagrant up\r\n```\r\n\r\n### SSH into the Box and Customize It\r\nWe’ll now SSH into the box and start customizing it.\r\n```shell\r\nvagrant ssh\r\n```\r\n\r\nNow, we need to setup our server by installing whatever we want on it.\r\n```shell\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\nsudo apt-get install vim\r\nsudo apt-get install apache2\r\nsudo service apache2 restart\r\n```\r\n### Make the Box as Small as possible\r\nWe’re now going to clean up disk space on the VM so when we package it into a new Vagrant box, it’s as clean as possible. First, remove APT cache\r\n```shell\r\nsudo apt-get clean\r\n```\r\nThen, “zero out” the drive (this is for Ubuntu):\r\n\r\n```shell\r\nsudo dd if=/dev/zero of=/EMPTY bs=1M\r\nsudo rm -f /EMPTY\r\n```\r\n\r\nLastly, let’s clear the Bash History and exit the VM:\r\n```shell\r\ncat /dev/null > ~/.bash_history && history -c && exit\r\n```\r\n\r\n### Repackage the VM into a New Vagrant Box\r\nWe’re now going to repackage the server we just created into a new Vagrant Base Box. It’s very easy with Vagrant:\r\n```shell\r\nvagrant package --output mynew.box\r\n```\r\n### Add the Box into Your Vagrant Install\r\nThe previous command creates a “mynew.box” file. You can technically put this wherever you want on your computer. Now, let’s add this new Vagrant Box into Vagrant:\r\n```shell\r\nvagrant box add mynewbox mynew.box\r\n```\r\n\r\nThis now will add the box into your Vagrant install allowing to initiate this from any folder, but before we do this, let’s delete and remove the Vagrant file we built this box from.\r\n```shell\r\nvagrant destroy\r\nrm Vagrantfile\r\n```\r\n### Initialize Your New Vagrant Box\r\nWe need to now initialize a Vagrant environment from our brand new box using the same command from earlier but referencing the new Box.\r\n```shell\r\nvagrant init mynewbox\r\n```\r\n## Customize Your New Vagrantfile\r\nWhen you initialize the Vagrant environment, it creates a Vagrantfile for you. Open the Vagrantfile and delete everything. Now paste the following bare-bones code into your Vagrantfile:\r\n```ruby\r\n# -*- mode: ruby -*-\r\n# vi: set ft=ruby :\r\n\r\nVagrant.configure(\"2\") do |config|\r\n\r\n  config.vm.box = \"mynewbox\"\r\n  config.vm.network \"private_network\", ip: \"192.168.33.10\"\r\n  config.vm.hostname = \"mynewbox\"\r\n  config.vm.synced_folder \".\", \"/var/www\", :mount_options => [\"dmode=777\", \"fmode=666\"]\r\n\r\nend\r\n```\r\n\r\n## SHELL PROVISIONER\r\nThe shell provisioner allows you to upload and execute a script within the guest machine. The shell provisioner takes various options.\r\n`inline (string)` - Specifies a shell command inline to execute on the remote machine. See the inline scripts section below for more information.\r\n`path (string)` - Path to a shell script to upload and execute. It can be a script relative to the project Vagrantfile or a remote script (like a gist).\r\n\r\n### INLINE SCRIPTS\r\nPerhaps the easiest way to get started is with an inline script. An inline script is a script that is given to Vagrant directly within the Vagrantfile. An example is best:\r\n```ruby\r\nVagrant.configure(\"2\") do |config|\r\n  config.vm.provision \"shell\",\r\n    inline: \"echo Hello, World\"\r\nend\r\n```\r\n\r\nThis causes echo `Hello, World` to be run within the guest machine when provisioners are run.\r\n\r\nCombined with a little bit more Ruby, this makes it very easy to embed your shell scripts directly within your Vagrantfile. Another example below:\r\n\r\n```ruby\r\n$script = <<SCRIPT\r\necho I am provisioning...\r\ndate > /etc/vagrant_provisioned_at\r\nSCRIPT\r\n\r\nVagrant.configure(\"2\") do |config|\r\n  config.vm.provision \"shell\", inline: $script\r\nend\r\n```\r\n\r\nThe script is assigned to a global variable `$script`. This global variable contains a string which is then passed in as the inline script to the Vagrant configuration.\r\n\r\n### EXTERNAL SCRIPT\r\nThe shell provisioner can also take an option specifying a path to a shell script on the host machine. Vagrant will then upload this script into the guest and execute it. An example:\r\n```ruby\r\nVagrant.configure(\"2\") do |config|\r\n  config.vm.provision \"shell\", path: \"script.sh\"\r\nend\r\n```\r\nRelative paths, such as above, are expanded relative to the location of the root Vagrantfile for your project. Absolute paths can also be used, as well as shortcuts such as ~ (home directory) and .. (parent directory).\r\n\r\nIf you use a remote script as part of your provisioning process, you can pass in its URL as the path argument as well:\r\n\r\n```ruby\r\nVagrant.configure(\"2\") do |config|\r\n  config.vm.provision \"shell\", path: \"https://example.com/provisioner.sh\"\r\nend\r\n```\r\n\r\n### SCRIPT ARGUMENTS\r\nYou can parameterize your scripts as well like any normal shell script. These arguments can be specified to the shell provisioner. They should be specified as a string as they'd be typed on the command line, so be sure to properly escape anything:\r\n```ruby\r\nVagrant.configure(\"2\") do |config|\r\n  config.vm.provision \"shell\" do |s|\r\n    s.inline = \"echo $1\"\r\n    s.args   = \"'hello, world!'\"\r\n  end\r\nend\r\n```\r\n\r\nYou can also specify arguments an array if you don't want to worry about quoting:\r\n```ruby\r\nVagrant.configure(\"2\") do |config|\r\n  config.vm.provision \"shell\" do |s|\r\n    s.inline = \"echo $1\"\r\n    s.args   = [\"hello, world!\"]\r\n  end\r\nend\r\n```","google":"UA-66492686-1","note":"Don't delete this file! It's used internally to help with page regeneration."}